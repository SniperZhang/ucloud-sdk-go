//Code is generated by ucloud code generator, don't modify it by hand, it will cause undefined behaviors.
//go:generate ucloud-gen-go-api UHost GetUHostUpgradePrice

package uhost

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// GetUHostUpgradePriceRequest is request schema for GetUHostUpgradePrice action
type GetUHostUpgradePriceRequest struct {
	request.CommonBase

	// 可用区。参见 [可用区列表](../summary/regionlist.html)
	Zone *string `required:"false"`

	// UHost实例ID 参见 [DescribeUHostInstance](describe_uhost_instance.html)
	UHostId *string `required:"true"`

	// 虚拟CPU核心数，单位: 个，范围: [1,16]，最小值为1，其他值是2的整数倍 默认值是该主机当前CPU数。
	CPU *int `required:"false"`

	// 内存容量大小，单位: MB，范围: [2048,65536]，步长: 2048 北京BGP C机房最小支持1024（限Linux系统）。 默认值是该主机当前内存大小。
	Memory *int `required:"false"`

	// 数据盘大小，单位: GB，范围[0,1000]，步长: 10， 默认值是该主机当前数据盘大小。
	DiskSpace *int `required:"false"`

	// 系统大小，单位: GB，范围[20,100]，步长: 10。
	BootDiskSpace *int `required:"false"`

	// 方舟机型。No，Yes。默认是No。
	TimemachineFeature *string `required:"false"`

	// 网卡升降级（1，表示升级，2表示降级，0表示不变）
	NetCapValue *int `required:"false"`

	// 主机系列，目前支持N1,N2
	HostType *string `required:"false"`
}

// GetUHostUpgradePriceResponse is response schema for GetUHostUpgradePrice action
type GetUHostUpgradePriceResponse struct {
	response.CommonBase

	// 升级差价
	Price float64
}

// NewGetUHostUpgradePriceRequest will create request of GetUHostUpgradePrice action.
func (c *UHostClient) NewGetUHostUpgradePriceRequest() *GetUHostUpgradePriceRequest {
	req := &GetUHostUpgradePriceRequest{}

	// setup request with client config
	c.client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

// GetUHostUpgradePrice - 获取UHost实例升级配置的价格。
func (c *UHostClient) GetUHostUpgradePrice(req *GetUHostUpgradePriceRequest) (*GetUHostUpgradePriceResponse, error) {
	var err error
	var res GetUHostUpgradePriceResponse

	err = c.client.InvokeAction("GetUHostUpgradePrice", req, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
