//Code is generated by ucloud code generator, don't modify it by hand, it will cause undefined behaviors.
//go:generate ucloud-gen-go-api UHost ResizeUHostInstance

package uhost

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// ResizeUHostInstanceRequest is request schema for ResizeUHostInstance action
type ResizeUHostInstanceRequest struct {
	request.CommonBase

	// 可用区。参见 [可用区列表](../summary/regionlist.html)
	Zone *string `required:"false"`

	// UHost实例ID 参见 [DescribeUHostInstance](describe_uhost_instance.html)
	UHostId *string `required:"true"`

	// 虚拟CPU核数，单位：个，系列1范围：[1,16]，系列2范围：[1,32]，最小值为1，其他值是2的倍数，默认值为当前实例的CPU核数
	CPU *int `required:"false"`

	// 内存大小，单位：MB，范围[2048,131072]，步长：2048，默认值为当前实例的内存大小（BGP-C数据中心最小支持1024，限Linux系统）
	Memory *int `required:"false"`

	// 数据盘大小，单位：GB，范围[10,1000]； SSD机型，单位：GB，范围[100,500]；步长：10，默认值为当前实例的数据盘大小，数据盘不支持缩容，因此不允许输入比当前实例数据盘大小的值
	DiskSpace *int `required:"false"`

	// 系统盘大小，单位：GB，范围[20,100]，步长：10，系统盘不支持缩容，因此不允许输入比当前实例系统盘小的值
	BootDiskSpace *int `required:"false"`

	// 网卡升降级（1，表示升级，2表示降级，0表示不变）
	NetCapValue *int `required:"false"`
}

// ResizeUHostInstanceResponse is response schema for ResizeUHostInstance action
type ResizeUHostInstanceResponse struct {
	response.CommonBase

	// UHost实例ID
	UhostId string
}

// NewResizeUHostInstanceRequest will create request of ResizeUHostInstance action.
func (c *UHostClient) NewResizeUHostInstanceRequest() *ResizeUHostInstanceRequest {
	req := &ResizeUHostInstanceRequest{}

	// setup request with client config
	c.client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

// ResizeUHostInstance - 修改指定UHost实例的资源配置，如CPU核心数，内存容量大小，磁盘空间大小,网络增强等。
func (c *UHostClient) ResizeUHostInstance(req *ResizeUHostInstanceRequest) (*ResizeUHostInstanceResponse, error) {
	var err error
	var res ResizeUHostInstanceResponse

	err = c.client.InvokeAction("ResizeUHostInstance", req, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
